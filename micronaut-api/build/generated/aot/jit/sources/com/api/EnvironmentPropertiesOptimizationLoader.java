package com.api;

import io.micronaut.core.optim.StaticOptimizations;
import io.micronaut.core.util.EnvironmentProperties;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EnvironmentPropertiesOptimizationLoader implements StaticOptimizations.Loader<EnvironmentProperties> {
  private void load0(Map<String, List<String>> env) {
    env.put("PATH", Arrays.asList("path"));
    env.put("IRBRC", Arrays.asList("irbrc"));
    env.put("npm_lifecycle_script", Arrays.asList("npm.lifecycle.script", "npm.lifecycle-script", "npm-lifecycle.script", "npm-lifecycle-script"));
    env.put("CODESPACES", Arrays.asList("codespaces"));
    env.put("DISABLE_NON_ESSENTIAL_MODEL_CALLS", Arrays.asList("disable.non.essential.model.calls", "disable.non.essential.model-calls", "disable.non.essential-model.calls", "disable.non.essential-model-calls", "disable.non-essential.model.calls", "disable.non-essential.model-calls", "disable.non-essential-model.calls", "disable.non-essential-model-calls", "disable-non.essential.model.calls", "disable-non.essential.model-calls", "disable-non.essential-model.calls", "disable-non.essential-model-calls", "disable-non-essential.model.calls", "disable-non-essential.model-calls", "disable-non-essential-model.calls", "disable-non-essential-model-calls"));
    env.put("CODESPACE_VSCODE_FOLDER", Arrays.asList("codespace.vscode.folder", "codespace.vscode-folder", "codespace-vscode.folder", "codespace-vscode-folder"));
    env.put("PROMPT_DIRTRIM", Arrays.asList("prompt.dirtrim", "prompt-dirtrim"));
    env.put("COREPACK_ENABLE_AUTO_PIN", Arrays.asList("corepack.enable.auto.pin", "corepack.enable.auto-pin", "corepack.enable-auto.pin", "corepack.enable-auto-pin", "corepack-enable.auto.pin", "corepack-enable.auto-pin", "corepack-enable-auto.pin", "corepack-enable-auto-pin"));
    env.put("MCP_TIMEOUT", Arrays.asList("mcp.timeout", "mcp-timeout"));
    env.put("GITHUB_API_URL", Arrays.asList("github.api.url", "github.api-url", "github-api.url", "github-api-url"));
    env.put("COLORTERM", Arrays.asList("colorterm"));
    env.put("INIT_CWD", Arrays.asList("init.cwd", "init-cwd"));
    env.put("DOCKER_BUILDKIT", Arrays.asList("docker.buildkit", "docker-buildkit"));
    env.put("SDKMAN_DIR", Arrays.asList("sdkman.dir", "sdkman-dir"));
    env.put("VSCODE_GIT_ASKPASS_NODE", Arrays.asList("vscode.git.askpass.node", "vscode.git.askpass-node", "vscode.git-askpass.node", "vscode.git-askpass-node", "vscode-git.askpass.node", "vscode-git.askpass-node", "vscode-git-askpass.node", "vscode-git-askpass-node"));
    env.put("rvm_version", Arrays.asList("rvm.version", "rvm-version"));
    env.put("PWD", Arrays.asList("pwd"));
    env.put("TERM_PROGRAM_VERSION", Arrays.asList("term.program.version", "term.program-version", "term-program.version", "term-program-version"));
    env.put("NVS_DIR", Arrays.asList("nvs.dir", "nvs-dir"));
    env.put("CONDA_SCRIPT", Arrays.asList("conda.script", "conda-script"));
    env.put("ENABLE_IDE_INTEGRATION", Arrays.asList("enable.ide.integration", "enable.ide-integration", "enable-ide.integration", "enable-ide-integration"));
    env.put("MAX_THINKING_TOKENS", Arrays.asList("max.thinking.tokens", "max.thinking-tokens", "max-thinking.tokens", "max-thinking-tokens"));
    env.put("HUGO_ROOT", Arrays.asList("hugo.root", "hugo-root"));
    env.put("MCP_TOOL_TIMEOUT", Arrays.asList("mcp.tool.timeout", "mcp.tool-timeout", "mcp-tool.timeout", "mcp-tool-timeout"));
    env.put("NVM_CD_FLAGS", Arrays.asList("nvm.cd.flags", "nvm.cd-flags", "nvm-cd.flags", "nvm-cd-flags"));
    env.put("LESSOPEN", Arrays.asList("lessopen"));
    env.put("NODE", Arrays.asList("node"));
    env.put("RVM_PATH", Arrays.asList("rvm.path", "rvm-path"));
    env.put("SDKMAN_CANDIDATES_API", Arrays.asList("sdkman.candidates.api", "sdkman.candidates-api", "sdkman-candidates.api", "sdkman-candidates-api"));
    env.put("MY_RUBY_HOME", Arrays.asList("my.ruby.home", "my.ruby-home", "my-ruby.home", "my-ruby-home"));
    env.put("npm_node_execpath", Arrays.asList("npm.node.execpath", "npm.node-execpath", "npm-node.execpath", "npm-node-execpath"));
    env.put("GITHUB_CODESPACE_TOKEN", Arrays.asList("github.codespace.token", "github.codespace-token", "github-codespace.token", "github-codespace-token"));
    env.put("ContainerVersion", Arrays.asList("containerversion"));
    env.put("rvm_path", Arrays.asList("rvm.path", "rvm-path"));
    env.put("RAILS_DEVELOPMENT_HOSTS", Arrays.asList("rails.development.hosts", "rails.development-hosts", "rails-development.hosts", "rails-development-hosts"));
    env.put("GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN", Arrays.asList("github.codespaces.port.forwarding.domain", "github.codespaces.port.forwarding-domain", "github.codespaces.port-forwarding.domain", "github.codespaces.port-forwarding-domain", "github.codespaces-port.forwarding.domain", "github.codespaces-port.forwarding-domain", "github.codespaces-port-forwarding.domain", "github.codespaces-port-forwarding-domain", "github-codespaces.port.forwarding.domain", "github-codespaces.port.forwarding-domain", "github-codespaces.port-forwarding.domain", "github-codespaces.port-forwarding-domain", "github-codespaces-port.forwarding.domain", "github-codespaces-port.forwarding-domain", "github-codespaces-port-forwarding.domain", "github-codespaces-port-forwarding-domain"));
    env.put("PYTHON_ROOT", Arrays.asList("python.root", "python-root"));
    env.put("NVM_SYMLINK_CURRENT", Arrays.asList("nvm.symlink.current", "nvm.symlink-current", "nvm-symlink.current", "nvm-symlink-current"));
    env.put("npm_config_cache", Arrays.asList("npm.config.cache", "npm.config-cache", "npm-config.cache", "npm-config-cache"));
    env.put("GITHUB_USER", Arrays.asList("github.user", "github-user"));
    env.put("SHLVL", Arrays.asList("shlvl"));
    env.put("DOTNET_RUNNING_IN_CONTAINER", Arrays.asList("dotnet.running.in.container", "dotnet.running.in-container", "dotnet.running-in.container", "dotnet.running-in-container", "dotnet-running.in.container", "dotnet-running.in-container", "dotnet-running-in.container", "dotnet-running-in-container"));
    env.put("npm_config_node_gyp", Arrays.asList("npm.config.node.gyp", "npm.config.node-gyp", "npm.config-node.gyp", "npm.config-node-gyp", "npm-config.node.gyp", "npm-config.node-gyp", "npm-config-node.gyp", "npm-config-node-gyp"));
    env.put("GITHUB_SERVER_URL", Arrays.asList("github.server.url", "github.server-url", "github-server.url", "github-server-url"));
    env.put("JAVA_ROOT", Arrays.asList("java.root", "java-root"));
    env.put("JAVA_HOME", Arrays.asList("java.home", "java-home"));
    env.put("npm_command", Arrays.asList("npm.command", "npm-command"));
    env.put("GIT_EDITOR", Arrays.asList("git.editor", "git-editor"));
    env.put("TERM", Arrays.asList("term"));
    env.put("GRADLE_HOME", Arrays.asList("gradle.home", "gradle-home"));
    env.put("NVM_INC", Arrays.asList("nvm.inc", "nvm-inc"));
    env.put("VSCODE_IPC_HOOK_CLI", Arrays.asList("vscode.ipc.hook.cli", "vscode.ipc.hook-cli", "vscode.ipc-hook.cli", "vscode.ipc-hook-cli", "vscode-ipc.hook.cli", "vscode-ipc.hook-cli", "vscode-ipc-hook.cli", "vscode-ipc-hook-cli"));
    env.put("GITHUB_REPOSITORY", Arrays.asList("github.repository", "github-repository"));
    env.put("npm_config_userconfig", Arrays.asList("npm.config.userconfig", "npm.config-userconfig", "npm-config.userconfig", "npm-config-userconfig"));
    env.put("CLAUDE_BASH_MAINTAIN_PROJECT_WORKING_DIR", Arrays.asList("claude.bash.maintain.project.working.dir", "claude.bash.maintain.project.working-dir", "claude.bash.maintain.project-working.dir", "claude.bash.maintain.project-working-dir", "claude.bash.maintain-project.working.dir", "claude.bash.maintain-project.working-dir", "claude.bash.maintain-project-working.dir", "claude.bash.maintain-project-working-dir", "claude.bash-maintain.project.working.dir", "claude.bash-maintain.project.working-dir", "claude.bash-maintain.project-working.dir", "claude.bash-maintain.project-working-dir", "claude.bash-maintain-project.working.dir", "claude.bash-maintain-project.working-dir", "claude.bash-maintain-project-working.dir", "claude.bash-maintain-project-working-dir", "claude-bash.maintain.project.working.dir", "claude-bash.maintain.project.working-dir", "claude-bash.maintain.project-working.dir", "claude-bash.maintain.project-working-dir", "claude-bash.maintain-project.working.dir", "claude-bash.maintain-project.working-dir", "claude-bash.maintain-project-working.dir", "claude-bash.maintain-project-working-dir", "claude-bash-maintain.project.working.dir", "claude-bash-maintain.project.working-dir", "claude-bash-maintain.project-working.dir", "claude-bash-maintain.project-working-dir", "claude-bash-maintain-project.working.dir", "claude-bash-maintain-project.working-dir", "claude-bash-maintain-project-working.dir", "claude-bash-maintain-project-working-dir"));
    env.put("_", Arrays.asList(".", "-"));
    env.put("NUGET_XMLDOC_MODE", Arrays.asList("nuget.xmldoc.mode", "nuget.xmldoc-mode", "nuget-xmldoc.mode", "nuget-xmldoc-mode"));
    env.put("NODE_ROOT", Arrays.asList("node.root", "node-root"));
    env.put("RUBY_HOME", Arrays.asList("ruby.home", "ruby-home"));
    env.put("ENABLE_DYNAMIC_INSTALL", Arrays.asList("enable.dynamic.install", "enable.dynamic-install", "enable-dynamic.install", "enable-dynamic-install"));
    env.put("TERM_PROGRAM", Arrays.asList("term.program", "term-program"));
    env.put("DOTNET_SKIP_FIRST_TIME_EXPERIENCE", Arrays.asList("dotnet.skip.first.time.experience", "dotnet.skip.first.time-experience", "dotnet.skip.first-time.experience", "dotnet.skip.first-time-experience", "dotnet.skip-first.time.experience", "dotnet.skip-first.time-experience", "dotnet.skip-first-time.experience", "dotnet.skip-first-time-experience", "dotnet-skip.first.time.experience", "dotnet-skip.first.time-experience", "dotnet-skip.first-time.experience", "dotnet-skip.first-time-experience", "dotnet-skip-first.time.experience", "dotnet-skip-first.time-experience", "dotnet-skip-first-time.experience", "dotnet-skip-first-time-experience"));
    env.put("npm_config_user_agent", Arrays.asList("npm.config.user.agent", "npm.config.user-agent", "npm.config-user.agent", "npm.config-user-agent", "npm-config.user.agent", "npm-config.user-agent", "npm-config-user.agent", "npm-config-user-agent"));
    env.put("PHP_ROOT", Arrays.asList("php.root", "php-root"));
    env.put("RUBY_ROOT", Arrays.asList("ruby.root", "ruby-root"));
    env.put("GOROOT", Arrays.asList("goroot"));
    env.put("JUPYTERLAB_PATH", Arrays.asList("jupyterlab.path", "jupyterlab-path"));
    env.put("GEM_PATH", Arrays.asList("gem.path", "gem-path"));
    env.put("CLAUDE_CODE_MAX_OUTPUT_TOKENS", Arrays.asList("claude.code.max.output.tokens", "claude.code.max.output-tokens", "claude.code.max-output.tokens", "claude.code.max-output-tokens", "claude.code-max.output.tokens", "claude.code-max.output-tokens", "claude.code-max-output.tokens", "claude.code-max-output-tokens", "claude-code.max.output.tokens", "claude-code.max.output-tokens", "claude-code.max-output.tokens", "claude-code.max-output-tokens", "claude-code-max.output.tokens", "claude-code-max.output-tokens", "claude-code-max-output.tokens", "claude-code-max-output-tokens"));
    env.put("npm_config_global_prefix", Arrays.asList("npm.config.global.prefix", "npm.config.global-prefix", "npm.config-global.prefix", "npm.config-global-prefix", "npm-config.global.prefix", "npm-config.global-prefix", "npm-config-global.prefix", "npm-config-global-prefix"));
    env.put("BASH_MAX_TIMEOUT_MS", Arrays.asList("bash.max.timeout.ms", "bash.max.timeout-ms", "bash.max-timeout.ms", "bash.max-timeout-ms", "bash-max.timeout.ms", "bash-max.timeout-ms", "bash-max-timeout.ms", "bash-max-timeout-ms"));
    env.put("BASH_DEFAULT_TIMEOUT_MS", Arrays.asList("bash.default.timeout.ms", "bash.default.timeout-ms", "bash.default-timeout.ms", "bash.default-timeout-ms", "bash-default.timeout.ms", "bash-default.timeout-ms", "bash-default-timeout.ms", "bash-default-timeout-ms"));
    env.put("NVM_BIN", Arrays.asList("nvm.bin", "nvm-bin"));
    env.put("npm_config_npm_version", Arrays.asList("npm.config.npm.version", "npm.config.npm-version", "npm.config-npm.version", "npm.config-npm-version", "npm-config.npm.version", "npm-config.npm-version", "npm-config-npm.version", "npm-config-npm-version"));
    env.put("NVS_USE_XZ", Arrays.asList("nvs.use.xz", "nvs.use-xz", "nvs-use.xz", "nvs-use-xz"));
    env.put("DOTNET_USE_POLLING_FILE_WATCHER", Arrays.asList("dotnet.use.polling.file.watcher", "dotnet.use.polling.file-watcher", "dotnet.use.polling-file.watcher", "dotnet.use.polling-file-watcher", "dotnet.use-polling.file.watcher", "dotnet.use-polling.file-watcher", "dotnet.use-polling-file.watcher", "dotnet.use-polling-file-watcher", "dotnet-use.polling.file.watcher", "dotnet-use.polling.file-watcher", "dotnet-use.polling-file.watcher", "dotnet-use.polling-file-watcher", "dotnet-use-polling.file.watcher", "dotnet-use-polling.file-watcher", "dotnet-use-polling-file.watcher", "dotnet-use-polling-file-watcher"));
    env.put("OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE", Arrays.asList("otel.exporter.otlp.metrics.temporality.preference", "otel.exporter.otlp.metrics.temporality-preference", "otel.exporter.otlp.metrics-temporality.preference", "otel.exporter.otlp.metrics-temporality-preference", "otel.exporter.otlp-metrics.temporality.preference", "otel.exporter.otlp-metrics.temporality-preference", "otel.exporter.otlp-metrics-temporality.preference", "otel.exporter.otlp-metrics-temporality-preference", "otel.exporter-otlp.metrics.temporality.preference", "otel.exporter-otlp.metrics.temporality-preference", "otel.exporter-otlp.metrics-temporality.preference", "otel.exporter-otlp.metrics-temporality-preference", "otel.exporter-otlp-metrics.temporality.preference", "otel.exporter-otlp-metrics.temporality-preference", "otel.exporter-otlp-metrics-temporality.preference", "otel.exporter-otlp-metrics-temporality-preference", "otel-exporter.otlp.metrics.temporality.preference", "otel-exporter.otlp.metrics.temporality-preference", "otel-exporter.otlp.metrics-temporality.preference", "otel-exporter.otlp.metrics-temporality-preference", "otel-exporter.otlp-metrics.temporality.preference", "otel-exporter.otlp-metrics.temporality-preference", "otel-exporter.otlp-metrics-temporality.preference", "otel-exporter.otlp-metrics-temporality-preference", "otel-exporter-otlp.metrics.temporality.preference", "otel-exporter-otlp.metrics.temporality-preference", "otel-exporter-otlp.metrics-temporality.preference", "otel-exporter-otlp.metrics-temporality-preference", "otel-exporter-otlp-metrics.temporality.preference", "otel-exporter-otlp-metrics.temporality-preference", "otel-exporter-otlp-metrics-temporality.preference", "otel-exporter-otlp-metrics-temporality-preference"));
    env.put("VSCODE_GIT_IPC_HANDLE", Arrays.asList("vscode.git.ipc.handle", "vscode.git.ipc-handle", "vscode.git-ipc.handle", "vscode.git-ipc-handle", "vscode-git.ipc.handle", "vscode-git.ipc-handle", "vscode-git-ipc.handle", "vscode-git-ipc-handle"));
    env.put("PIPX_HOME", Arrays.asList("pipx.home", "pipx-home"));
    env.put("HUGO_DIR", Arrays.asList("hugo.dir", "hugo-dir"));
    env.put("MAVEN_ROOT", Arrays.asList("maven.root", "maven-root"));
    env.put("MAVEN_HOME", Arrays.asList("maven.home", "maven-home"));
    env.put("CLAUDE_CODE_ENTRYPOINT", Arrays.asList("claude.code.entrypoint", "claude.code-entrypoint", "claude-code.entrypoint", "claude-code-entrypoint"));
    env.put("ORYX_PREFER_USER_INSTALLED_SDKS", Arrays.asList("oryx.prefer.user.installed.sdks", "oryx.prefer.user.installed-sdks", "oryx.prefer.user-installed.sdks", "oryx.prefer.user-installed-sdks", "oryx.prefer-user.installed.sdks", "oryx.prefer-user.installed-sdks", "oryx.prefer-user-installed.sdks", "oryx.prefer-user-installed-sdks", "oryx-prefer.user.installed.sdks", "oryx-prefer.user.installed-sdks", "oryx-prefer.user-installed.sdks", "oryx-prefer.user-installed-sdks", "oryx-prefer-user.installed.sdks", "oryx-prefer-user.installed-sdks", "oryx-prefer-user-installed.sdks", "oryx-prefer-user-installed-sdks"));
    env.put("COLOR", Arrays.asList("color"));
    env.put("CLAUDECODE", Arrays.asList("claudecode"));
    env.put("npm_lifecycle_event", Arrays.asList("npm.lifecycle.event", "npm.lifecycle-event", "npm-lifecycle.event", "npm-lifecycle-event"));
    env.put("GIT_ASKPASS", Arrays.asList("git.askpass", "git-askpass"));
    env.put("SHELL", Arrays.asList("shell"));
    env.put("npm_config_noproxy", Arrays.asList("npm.config.noproxy", "npm.config-noproxy", "npm-config.noproxy", "npm-config-noproxy"));
    env.put("GITHUB_TOKEN", Arrays.asList("github.token", "github-token"));
    env.put("npm_config_prefix", Arrays.asList("npm.config.prefix", "npm.config-prefix", "npm-config.prefix", "npm-config-prefix"));
    env.put("GITHUB_GRAPHQL_URL", Arrays.asList("github.graphql.url", "github.graphql-url", "github-graphql.url", "github-graphql-url"));
    env.put("OLDPWD", Arrays.asList("oldpwd"));
    env.put("GOPATH", Arrays.asList("gopath"));
    env.put("DEBIAN_FLAVOR", Arrays.asList("debian.flavor", "debian-flavor"));
    env.put("GEM_HOME", Arrays.asList("gem.home", "gem-home"));
    env.put("PHP_PATH", Arrays.asList("php.path", "php-path"));
    env.put("npm_config_init_module", Arrays.asList("npm.config.init.module", "npm.config.init-module", "npm.config-init.module", "npm.config-init-module", "npm-config.init.module", "npm-config.init-module", "npm-config-init.module", "npm-config-init-module"));
    env.put("CLAUDE_CODE_SSE_PORT", Arrays.asList("claude.code.sse.port", "claude.code.sse-port", "claude.code-sse.port", "claude.code-sse-port", "claude-code.sse.port", "claude-code.sse-port", "claude-code-sse.port", "claude-code-sse-port"));
    env.put("DOTNET_ROOT", Arrays.asList("dotnet.root", "dotnet-root"));
    env.put("RUBY_VERSION", Arrays.asList("ruby.version", "ruby-version"));
    env.put("BASH_MAX_OUTPUT_LENGTH", Arrays.asList("bash.max.output.length", "bash.max.output-length", "bash.max-output.length", "bash.max-output-length", "bash-max.output.length", "bash-max.output-length", "bash-max-output.length", "bash-max-output-length"));
    env.put("LS_COLORS", Arrays.asList("ls.colors", "ls-colors"));
    env.put("PIPX_BIN_DIR", Arrays.asList("pipx.bin.dir", "pipx.bin-dir", "pipx-bin.dir", "pipx-bin-dir"));
    env.put("ORYX_ENV_TYPE", Arrays.asList("oryx.env.type", "oryx.env-type", "oryx-env.type", "oryx-env-type"));
    env.put("npm_package_json", Arrays.asList("npm.package.json", "npm.package-json", "npm-package.json", "npm-package-json"));
    env.put("LESSCLOSE", Arrays.asList("lessclose"));
    env.put("BROWSER", Arrays.asList("browser"));
    env.put("rvm_bin_path", Arrays.asList("rvm.bin.path", "rvm.bin-path", "rvm-bin.path", "rvm-bin-path"));
    env.put("CLOUDENV_ENVIRONMENT_ID", Arrays.asList("cloudenv.environment.id", "cloudenv.environment-id", "cloudenv-environment.id", "cloudenv-environment-id"));
    env.put("ORYX_SDK_STORAGE_BASE_URL", Arrays.asList("oryx.sdk.storage.base.url", "oryx.sdk.storage.base-url", "oryx.sdk.storage-base.url", "oryx.sdk.storage-base-url", "oryx.sdk-storage.base.url", "oryx.sdk-storage.base-url", "oryx.sdk-storage-base.url", "oryx.sdk-storage-base-url", "oryx-sdk.storage.base.url", "oryx-sdk.storage.base-url", "oryx-sdk.storage-base.url", "oryx-sdk.storage-base-url", "oryx-sdk-storage.base.url", "oryx-sdk-storage.base-url", "oryx-sdk-storage-base.url", "oryx-sdk-storage-base-url"));
    env.put("rvm_prefix", Arrays.asList("rvm.prefix", "rvm-prefix"));
    env.put("LANG", Arrays.asList("lang"));
    env.put("VSCODE_GIT_ASKPASS_MAIN", Arrays.asList("vscode.git.askpass.main", "vscode.git.askpass-main", "vscode.git-askpass.main", "vscode.git-askpass-main", "vscode-git.askpass.main", "vscode-git.askpass-main", "vscode-git-askpass.main", "vscode-git-askpass-main"));
    env.put("INTERNAL_VSCS_TARGET_URL", Arrays.asList("internal.vscs.target.url", "internal.vscs.target-url", "internal.vscs-target.url", "internal.vscs-target-url", "internal-vscs.target.url", "internal-vscs.target-url", "internal-vscs-target.url", "internal-vscs-target-url"));
    env.put("CONDA_DIR", Arrays.asList("conda.dir", "conda-dir"));
    env.put("VSCODE_GIT_ASKPASS_EXTRA_ARGS", Arrays.asList("vscode.git.askpass.extra.args", "vscode.git.askpass.extra-args", "vscode.git.askpass-extra.args", "vscode.git.askpass-extra-args", "vscode.git-askpass.extra.args", "vscode.git-askpass.extra-args", "vscode.git-askpass-extra.args", "vscode.git-askpass-extra-args", "vscode-git.askpass.extra.args", "vscode-git.askpass.extra-args", "vscode-git.askpass-extra.args", "vscode-git.askpass-extra-args", "vscode-git-askpass.extra.args", "vscode-git-askpass.extra-args", "vscode-git-askpass-extra.args", "vscode-git-askpass-extra-args"));
    env.put("npm_execpath", Arrays.asList("npm.execpath", "npm-execpath"));
    env.put("CLAUDE_WORKING_DIR", Arrays.asList("claude.working.dir", "claude.working-dir", "claude-working.dir", "claude-working-dir"));
    env.put("SDKMAN_CANDIDATES_DIR", Arrays.asList("sdkman.candidates.dir", "sdkman.candidates-dir", "sdkman-candidates.dir", "sdkman-candidates-dir"));
    env.put("npm_config_local_prefix", Arrays.asList("npm.config.local.prefix", "npm.config.local-prefix", "npm.config-local.prefix", "npm.config-local-prefix", "npm-config.local.prefix", "npm-config.local-prefix", "npm-config-local.prefix", "npm-config-local-prefix"));
    env.put("NVS_ROOT", Arrays.asList("nvs.root", "nvs-root"));
    env.put("NVS_HOME", Arrays.asList("nvs.home", "nvs-home"));
    env.put("DISABLE_COST_WARNINGS", Arrays.asList("disable.cost.warnings", "disable.cost-warnings", "disable-cost.warnings", "disable-cost-warnings"));
    env.put("npm_config_globalconfig", Arrays.asList("npm.config.globalconfig", "npm.config-globalconfig", "npm-config.globalconfig", "npm-config-globalconfig"));
    env.put("NVM_DIR", Arrays.asList("nvm.dir", "nvm-dir"));
    env.put("NVS_OS", Arrays.asList("nvs.os", "nvs-os"));
    env.put("SHELL_LOGGED_IN", Arrays.asList("shell.logged.in", "shell.logged-in", "shell-logged.in", "shell-logged-in"));
    env.put("PYTHONIOENCODING", Arrays.asList("pythonioencoding"));
    env.put("PYTHON_PATH", Arrays.asList("python.path", "python-path"));
    env.put("SDKMAN_PLATFORM", Arrays.asList("sdkman.platform", "sdkman-platform"));
    env.put("USER", Arrays.asList("user"));
    env.put("ORYX_DIR", Arrays.asList("oryx.dir", "oryx-dir"));
    env.put("EDITOR", Arrays.asList("editor"));
    env.put("HOSTNAME", Arrays.asList("hostname"));
    env.put("CODESPACE_NAME", Arrays.asList("codespace.name", "codespace-name"));
    env.put("HOME", Arrays.asList("home"));
    env.put("NPM_GLOBAL", Arrays.asList("npm.global", "npm-global"));
    env.put("DYNAMIC_INSTALL_ROOT_DIR", Arrays.asList("dynamic.install.root.dir", "dynamic.install.root-dir", "dynamic.install-root.dir", "dynamic.install-root-dir", "dynamic-install.root.dir", "dynamic-install.root-dir", "dynamic-install-root.dir", "dynamic-install-root-dir"));
  }

  @Override
  public EnvironmentProperties load() {
    Map<String, List<String>> env = new HashMap<String, List<String>>();
    load0(env);
    return EnvironmentProperties.of(env);
  }
}
