{
  "info": {
    "_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
    "name": "Micronaut Auth API",
    "description": "Complete API collection for testing Micronaut Authentication API\n\n## Authentication Flow\n1. Register a new user or use existing credentials\n2. Login to get access token\n3. Use token in Authorization header for protected endpoints\n\n## Variables\n- `base_url`: API base URL (default: http://localhost:8080)\n- `access_token`: JWT access token (auto-set from login)\n- `refresh_token`: JWT refresh token (auto-set from login)\n- `username`: Test username\n- `email`: Test email\n- `password`: Test password\n\n## Pre-request Scripts\nSome requests include pre-request scripts to set up test data or extract tokens from responses.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Public Endpoints",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/public/health",
              "host": ["{{base_url}}"],
              "path": ["api", "public", "health"]
            },
            "description": "Check application health status. No authentication required."
          },
          "response": [
            {
              "name": "Health Check Success",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/public/health",
                  "host": ["{{base_url}}"],
                  "path": ["api", "public", "health"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"status\": \"UP\",\n  \"timestamp\": \"1642248000000\"\n}"
            }
          ]
        },
        {
          "name": "Application Info",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/public/info",
              "host": ["{{base_url}}"],
              "path": ["api", "public", "info"]
            },
            "description": "Get application information. No authentication required."
          },
          "response": [
            {
              "name": "Application Info Success",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/api/public/info",
                  "host": ["{{base_url}}"],
                  "path": ["api", "public", "info"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"application\": \"Micronaut Auth API\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Authentication API with JWT tokens\"\n}"
            }
          ]
        }
      ],
      "description": "Public endpoints that don't require authentication."
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains access token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('accessToken');",
                  "    pm.expect(jsonData).to.have.property('refreshToken');",
                  "    pm.expect(jsonData.tokenType).to.eql('Bearer');",
                  "    pm.expect(jsonData.expiresIn).to.eql(3600);",
                  "    ",
                  "    // Set tokens as environment variables",
                  "    pm.environment.set('access_token', jsonData.accessToken);",
                  "    pm.environment.set('refresh_token', jsonData.refreshToken);",
                  "});",
                  "",
                  "pm.test(\"Response contains user info\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('username');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData.username).to.eql(pm.environment.get('username'));",
                  "    pm.expect(jsonData.email).to.eql(pm.environment.get('email'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate unique test data",
                  "const timestamp = Date.now();",
                  "const username = 'testuser' + timestamp;",
                  "const email = 'test' + timestamp + '@example.com';",
                  "const password = 'testpassword123';",
                  "",
                  "pm.environment.set('username', username);",
                  "pm.environment.set('email', email);",
                  "pm.environment.set('password', password);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Register a new user account. Returns access and refresh tokens on successful registration."
          }
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains access token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('accessToken');",
                  "    pm.expect(jsonData).to.have.property('refreshToken');",
                  "    pm.expect(jsonData.tokenType).to.eql('Bearer');",
                  "    pm.expect(jsonData.expiresIn).to.eql(3600);",
                  "    ",
                  "    // Update tokens in environment",
                  "    pm.environment.set('access_token', jsonData.accessToken);",
                  "    pm.environment.set('refresh_token', jsonData.refreshToken);",
                  "});",
                  "",
                  "pm.test(\"Response contains user info\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('username');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "});"  
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Login with existing user credentials. Returns access and refresh tokens on successful authentication."
          }
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401 (Not Implemented)\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "// This endpoint is not yet implemented",
                  "// Expected behavior: return new access token using refresh token"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/refresh",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "refresh"]
            },
            "description": "Refresh access token using refresh token. Currently not implemented - returns 401."
          }
        }
      ],
      "description": "Authentication endpoints for user registration, login, and token refresh."
    },
    {
      "name": "User Management",
      "item": [
        {
          "name": "Get User Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains user profile\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('username');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('enabled');",
                  "    pm.expect(jsonData).to.have.property('createdAt');",
                  "    pm.expect(jsonData).to.have.property('roles');",
                  "    ",
                  "    // Password should not be included in response",
                  "    pm.expect(jsonData.password).to.be.null;",
                  "});",
                  "",
                  "pm.test(\"User account is enabled\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.enabled).to.be.true;",
                  "    pm.expect(jsonData.accountNonExpired).to.be.true;",
                  "    pm.expect(jsonData.accountNonLocked).to.be.true;",
                  "    pm.expect(jsonData.credentialsNonExpired).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/profile",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "profile"]
            },
            "description": "Get current user's profile information. Requires valid access token."
          }
        }
      ],
      "description": "User management endpoints requiring authentication."
    },
    {
      "name": "Error Scenarios",
      "item": [
        {
          "name": "Register with Duplicate Username",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 Bad Request\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error message indicates duplicate username\", function () {",
                  "    // Response format may vary - check for error indication",
                  "    pm.expect(pm.response.code).to.eql(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"different@example.com\",\n  \"password\": \"{{password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Attempt to register with a username that already exists. Should return 400."
          }
        },
        {
          "name": "Login with Invalid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401 Unauthorized\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"nonexistentuser\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Attempt to login with invalid credentials. Should return 401."
          }
        },
        {
          "name": "Access Protected Endpoint Without Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401 Unauthorized\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/users/profile",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "profile"]
            },
            "description": "Attempt to access protected endpoint without authorization header. Should return 401."
          }
        },
        {
          "name": "Access Protected Endpoint with Invalid Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401 Unauthorized\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid-token-here",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/profile",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "profile"]
            },
            "description": "Attempt to access protected endpoint with invalid token. Should return 401."
          }
        },
        {
          "name": "Register with Invalid Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 Bad Request\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"validuser\",\n  \"email\": \"invalid-email-format\",\n  \"password\": \"validpassword123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Attempt to register with invalid email format. Should return 400 with validation error."
          }
        },
        {
          "name": "Register with Short Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 Bad Request\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"validuser\",\n  \"email\": \"valid@example.com\",\n  \"password\": \"123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Attempt to register with password shorter than minimum length. Should return 400 with validation error."
          }
        }
      ],
      "description": "Test cases for various error scenarios and edge cases."
    },
    {
      "name": "Complete User Journey",
      "item": [
        {
          "name": "1. Register New User",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate unique test data for complete journey",
                  "const timestamp = Date.now();",
                  "const journeyUsername = 'journey' + timestamp;",
                  "const journeyEmail = 'journey' + timestamp + '@example.com';",
                  "const journeyPassword = 'journeypassword123';",
                  "",
                  "pm.environment.set('journey_username', journeyUsername);",
                  "pm.environment.set('journey_email', journeyEmail);",
                  "pm.environment.set('journey_password', journeyPassword);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Registration successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('journey_access_token', jsonData.accessToken);",
                  "    pm.environment.set('journey_refresh_token', jsonData.refreshToken);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{journey_username}}\",\n  \"email\": \"{{journey_email}}\",\n  \"password\": \"{{journey_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "register"]
            }
          }
        },
        {
          "name": "2. Login with Registered User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Login successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('journey_access_token', jsonData.accessToken);",
                  "    pm.environment.set('journey_refresh_token', jsonData.refreshToken);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{journey_username}}\",\n  \"password\": \"{{journey_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "login"]
            }
          }
        },
        {
          "name": "3. Access User Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Profile access successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.username).to.eql(pm.environment.get('journey_username'));",
                  "    pm.expect(jsonData.email).to.eql(pm.environment.get('journey_email'));",
                  "    pm.expect(jsonData.password).to.be.null;",
                  "});",
                  "",
                  "pm.test(\"Complete user journey successful\", function () {",
                  "    console.log('✅ Complete user journey test passed!');",
                  "    console.log('User registered, logged in, and accessed profile successfully.');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{journey_access_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/profile",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "profile"]
            }
          }
        }
      ],
      "description": "Complete user journey from registration to profile access. Run requests in sequence."
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "// Set default base URL if not already set",
          "if (!pm.environment.get('base_url')) {",
          "    pm.environment.set('base_url', 'http://localhost:8080');",
          "}",
          "",
          "// Log request details for debugging",
          "console.log('Making request to: ' + pm.request.url.toString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "// Log response details",
          "console.log('Response status: ' + pm.response.code + ' ' + pm.response.status);",
          "if (pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
          "    try {",
          "        const responseJson = pm.response.json();",
          "        console.log('Response body: ' + JSON.stringify(responseJson, null, 2));",
          "    } catch (e) {",
          "        console.log('Could not parse response as JSON');",
          "    }",
          "}",
          "",
          "// Common tests for all requests",
          "pm.test(\"Response time is reasonable\", function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000); // 5 seconds",
          "});",
          "",
          "pm.test(\"Content-Type header is present\", function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.exist;",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "access_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "refresh_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "username",
      "value": "",
      "type": "string"
    },
    {
      "key": "email",
      "value": "",
      "type": "string"
    },
    {
      "key": "password",
      "value": "",
      "type": "string"
    }
  ]
}